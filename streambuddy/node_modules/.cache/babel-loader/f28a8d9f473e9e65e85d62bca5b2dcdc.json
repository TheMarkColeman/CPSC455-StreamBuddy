{"ast":null,"code":"var _jsxFileName = \"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/LanguageSelector.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst icon = /*#__PURE__*/_jsxDEV(CheckBoxOutlineBlankIcon, {\n  fontSize: \"small\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 14\n}, this);\n\nconst checkedIcon = /*#__PURE__*/_jsxDEV(CheckBoxIcon, {\n  fontSize: \"small\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 21\n}, this);\n\nexport default function LanguageSelector(props) {\n  _s();\n\n  const [language, setLanguage] = useState(\"\");\n\n  function handleChange(event, newInputValue) {\n    if (newInputValue !== null) {\n      setLanguage(newInputValue);\n      props.languageCallBack(newInputValue);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    onChange: handleChange,\n    multiple: true,\n    id: \"checkboxes\",\n    options: props.items,\n    disableCloseOnSelect: true,\n    getOptionLabel: option => option.item,\n    renderOption: (option, {\n      selected\n    }) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        color: \"primary\",\n        icon: icon,\n        checkedIcon: checkedIcon,\n        style: {\n          marginRight: 8\n        },\n        checked: selected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), option.item]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this),\n    style: {\n      width: 200\n    },\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      variant: \"outlined\",\n      label: props.label,\n      placeholder: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LanguageSelector, \"7rbprT3SiziRa4IwIJKdNRHcFOQ=\");\n\n_c = LanguageSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageSelector\");","map":{"version":3,"sources":["/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/LanguageSelector.js"],"names":["React","useState","Checkbox","TextField","Autocomplete","CheckBoxOutlineBlankIcon","CheckBoxIcon","icon","checkedIcon","LanguageSelector","props","language","setLanguage","handleChange","event","newInputValue","languageCallBack","items","option","item","selected","marginRight","width","params","label"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;;AAEA,MAAMC,IAAI,gBAAG,QAAC,wBAAD;AAA0B,EAAA,QAAQ,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,QAAb;;AACA,MAAMC,WAAW,gBAAG,QAAC,YAAD;AAAc,EAAA,QAAQ,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,QAApB;;AAKA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;;AAGA,WAASY,YAAT,CAAsBC,KAAtB,EAA6BC,aAA7B,EAA4C;AACxC,QAAIA,aAAa,KAAK,IAAtB,EAA4B;AACxBH,MAAAA,WAAW,CAACG,aAAD,CAAX;AACAL,MAAAA,KAAK,CAACM,gBAAN,CAAuBD,aAAvB;AAEH;AACJ;;AAED,sBACI,QAAC,YAAD;AACI,IAAA,QAAQ,EAAEF,YADd;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,EAAE,EAAC,YAHP;AAII,IAAA,OAAO,EAAEH,KAAK,CAACO,KAJnB;AAKI,IAAA,oBAAoB,MALxB;AAMI,IAAA,cAAc,EAAGC,MAAD,IAAYA,MAAM,CAACC,IANvC;AAOI,IAAA,YAAY,EAAE,CAACD,MAAD,EAAS;AAAEE,MAAAA;AAAF,KAAT,kBACV,QAAC,KAAD,CAAO,QAAP;AAAA,8BACI,QAAC,QAAD;AAAU,QAAA,KAAK,EAAC,SAAhB;AACU,QAAA,IAAI,EAAEb,IADhB;AAEU,QAAA,WAAW,EAAEC,WAFvB;AAGU,QAAA,KAAK,EAAE;AAAEa,UAAAA,WAAW,EAAE;AAAf,SAHjB;AAIU,QAAA,OAAO,EAAED;AAJnB;AAAA;AAAA;AAAA;AAAA,cADJ,EAOKF,MAAM,CAACC,IAPZ;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAkBI,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAlBX;AAmBI,IAAA,WAAW,EAAGC,MAAD,iBACT,QAAC,SAAD,OAAeA,MAAf;AAAuB,MAAA,OAAO,EAAC,UAA/B;AAA0C,MAAA,KAAK,EAAEb,KAAK,CAACc,KAAvD;AAA8D,MAAA,WAAW,EAAEd,KAAK,CAACc;AAAjF;AAAA;AAAA;AAAA;AAAA;AApBR;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH;;GArCuBf,gB;;KAAAA,gB","sourcesContent":["import React, { useState } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\n\n\n\nexport default function LanguageSelector(props) {\n    const [language, setLanguage] = useState(\"\");\n\n\n    function handleChange(event, newInputValue) {\n        if (newInputValue !== null) {\n            setLanguage(newInputValue);\n            props.languageCallBack(newInputValue);\n\n        }\n    }\n\n    return (\n        <Autocomplete\n            onChange={handleChange}\n            multiple\n            id=\"checkboxes\"\n            options={props.items}\n            disableCloseOnSelect\n            getOptionLabel={(option) => option.item}\n            renderOption={(option, { selected }) => (\n                <React.Fragment>\n                    <Checkbox color=\"primary\"\n                              icon={icon}\n                              checkedIcon={checkedIcon}\n                              style={{ marginRight: 8 }}\n                              checked={selected}\n                    />\n                    {option.item}\n                </React.Fragment>\n            )}\n            style={{ width: 200 }}\n            renderInput={(params) => (\n                <TextField {...params} variant=\"outlined\" label={props.label} placeholder={props.label} />\n            )}\n        />\n    );\n}"]},"metadata":{},"sourceType":"module"}