[{"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/index.js":"1","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/App.js":"2","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/reportWebVitals.js":"3","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/Profile.js":"4","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/Home.js":"5","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/About.js":"6","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/Login.js":"7","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Navbar.js":"8","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/UserContext.js":"9","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Theme.js":"10","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Authentications.js":"11","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/User.js":"12","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/ProfileNavbar.js":"13","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Sidebar.js":"14","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Reviews.js":"15","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Friends.js":"16","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MoviecardListWrapper.js":"17","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/RangeSlider.js":"18","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/SearchBar.js":"19","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MoviecardList.js":"20","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/AutocompletePlusCheckbox.js":"21","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/SearchButton.js":"22","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/netflixMovieList.js":"23","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/featuredMovieList.js":"24","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/SingleReview.js":"25","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Alerts.js":"26","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Moviecard.js":"27","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MoviecardListDense.js":"28","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MovieCardActions.js":"29","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/RatingsAndReviewInput.js":"30","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/AdvanceSearchButton.js":"31"},{"size":489,"mtime":1628139312788,"results":"32","hashOfConfig":"33"},{"size":1702,"mtime":1628139312767,"results":"34","hashOfConfig":"33"},{"size":403,"mtime":1628139284249,"results":"35","hashOfConfig":"33"},{"size":597,"mtime":1628139312768,"results":"36","hashOfConfig":"33"},{"size":216,"mtime":1628139312768,"results":"37","hashOfConfig":"33"},{"size":308,"mtime":1628139312767,"results":"38","hashOfConfig":"33"},{"size":368,"mtime":1628139312768,"results":"39","hashOfConfig":"33"},{"size":7733,"mtime":1628140547938,"results":"40","hashOfConfig":"33"},{"size":124,"mtime":1628141808021,"results":"41","hashOfConfig":"33"},{"size":957,"mtime":1628143424297,"results":"42","hashOfConfig":"33"},{"size":1759,"mtime":1628139312776,"results":"43","hashOfConfig":"33"},{"size":1203,"mtime":1628141822676,"results":"44","hashOfConfig":"33"},{"size":3115,"mtime":1628139312781,"results":"45","hashOfConfig":"33"},{"size":14012,"mtime":1628151398347,"results":"46","hashOfConfig":"33"},{"size":1220,"mtime":1628139312782,"results":"47","hashOfConfig":"33"},{"size":609,"mtime":1628139312777,"results":"48","hashOfConfig":"33"},{"size":2839,"mtime":1628139312780,"results":"49","hashOfConfig":"33"},{"size":1248,"mtime":1628151128004,"results":"50","hashOfConfig":"33"},{"size":1717,"mtime":1628142316227,"results":"51","hashOfConfig":"33"},{"size":1751,"mtime":1628139312778,"results":"52","hashOfConfig":"33"},{"size":1584,"mtime":1628145167119,"results":"53","hashOfConfig":"33"},{"size":1300,"mtime":1628142339316,"results":"54","hashOfConfig":"33"},{"size":127112,"mtime":1628139312790,"results":"55","hashOfConfig":"33"},{"size":44246,"mtime":1628151519212,"results":"56","hashOfConfig":"33"},{"size":2562,"mtime":1628161493040,"results":"57","hashOfConfig":"33"},{"size":1559,"mtime":1628142022541,"results":"58","hashOfConfig":"33"},{"size":4675,"mtime":1628139312778,"results":"59","hashOfConfig":"33"},{"size":2227,"mtime":1628139312780,"results":"60","hashOfConfig":"33"},{"size":9330,"mtime":1628153979154,"results":"61","hashOfConfig":"33"},{"size":2632,"mtime":1628160787120,"results":"62","hashOfConfig":"33"},{"size":2838,"mtime":1628144167800,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1m6k6o8",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/index.js",[],["137","138"],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/App.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/reportWebVitals.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/Profile.js",["139"],"import React, {useContext} from 'react';\nimport ProfileNavbar from '../components/ProfileNavbar';\nimport User from '../components/User';\nimport {Container} from \"@material-ui/core\";\nimport {UserContext} from \"../components/UserContext\";\n\n\nfunction Profile() {\n\n    const {user, setUser} = useContext(UserContext);\n\n    return(\n        <Container maxWidth=\"lg\">\n            <div>\n                {user.name && <User name={user.name}/>}\n                <ProfileNavbar watchedMovies={user.watched} watchList={user.watchlist}/>\n            </div>\n        </Container>\n    );\n}\n\nexport default Profile;","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/Home.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/About.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/Pages/Login.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Navbar.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/UserContext.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Theme.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Authentications.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/User.js",["140"],"import React, {useContext} from 'react';\nimport {Container} from \"@material-ui/core\";\nimport profilePicture from \"../assets/profilePic.png\"\nimport {UserContext} from \"./UserContext\";\n\n\n\nfunction User(props) {\n    const {user} = useContext(UserContext);\n\n    let numWatchedMovies = user.watched.length;\n    let numWatchlistMovies = user.watchlist.length;\n    let numReviews = user.reviews.length;\n    // dummy data for follower and following below\n    let numFollowers = 5;\n    let numFollowing = 7;\n\n    const editButtonClick = () => {\n        alert(\"Implement form to edit user profile!\")\n    }\n\n    return(\n        <Container maxWidth=\"lg\">\n            <div className=\"userDiv\">  \n                <img className=\"userImg\" src={profilePicture} onClick={() => editButtonClick()}/>\n                <div className =\"userDetailsDiv\">\n                    <h1 onClick={() => editButtonClick()}> {props.name} </h1>\n                    <span>{numWatchedMovies} watched movies ~ {numWatchlistMovies} watchlist movies ~ {numReviews} reviews ~ {numFollowers} followers ~ {numFollowing} following</span>\n                </div>\n                \n            </div>\n        </Container>\n    );\n}\n\nexport default User;","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/ProfileNavbar.js",["141","142","143","144"],"import React, {useContext} from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport MoviecardListWrapper from \"./MoviecardListWrapper\";\nimport Reviews from \"./Reviews\";\nimport Friends from \"./Friends\";\nimport {UserContext} from \"./UserContext\";\n\nfunction TabPanel(props) {\n    let { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nfunction ProfileNavbar(props) {\n\n    const classes = useStyles();\n    let [value, setValue] = React.useState(0);\n    let tempWatchList = props.watchList;\n    let tempWatchedMovies = props.watchedMovies;\n\n    const {user, setUser} = useContext(UserContext);\n\n    const [views, setViews] = React.useState(\n        {\n            denseViewWatchList: false,\n            denseViewWatchedMovies: false\n        }\n    )\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"Watchlist\" {...a11yProps(0)} />\n                    <Tab label=\"Movies I've Seen\" {...a11yProps(1)} />\n                    <Tab label=\"My Reviews\" {...a11yProps(2)} />\n                    <Tab label=\"My Friends\" {...a11yProps(3)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                <MoviecardListWrapper id=\"watchlist\" name=\"Watchlist\" movieList={user.watchlist} denseView={views.denseViewWatchList}/>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <MoviecardListWrapper id=\"watchedMovies\" name=\"Watched Movies\" movieList={user.watched} denseView={views.denseViewWatchedMovies} />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <Reviews />\n            </TabPanel>\n            <TabPanel value={value} index={3}>\n                <Friends id=\"friends\" />\n            </TabPanel>\n        </div>\n    );\n}\nexport default ProfileNavbar;\n\n\n\n\n\n","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Sidebar.js",["145","146"],"import React, {useState} from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport { netflixMovieList } from \"../netflixMovieList\";\nimport { featuredMovieList } from \"../featuredMovieList\";\nimport MoviecardList from \"./MoviecardList\";\nimport SearchBar from \"./SearchBar\";\nimport SearchButton from \"./SearchButton\";\nimport AdvanceSearchButton from \"./AdvanceSearchButton\";\nimport AutocompletePlusCheckbox from \"./AutocompletePlusCheckbox\";\nimport RangeSlider from \"./RangeSlider\";\n\n\n\n// min and max years available from the API - we use it to init the range slider\nlet yearRangeAvailable = [1930, 2022];\n// the years selected by the user\nlet selectedYears = [1930, 2022];\n//Min and max IMDB rating\nlet imdbScoreAvailable = [0, 10];\n// the scores selected by the user\nlet selectedImdbScores = [0, 10];\n\n\n// sets the user selected year\nfunction setSelectedYears(years) {\n    selectedYears[0] = years[0];\n    selectedYears[1] = years[1];\n    // TODO: delete logging statement for production\n    //console.log(\"selected range = \" + selectedYears[0] + \" - \" + selectedYears[1]);\n}\n\nfunction setSelectedimdbScore(score) {\n    selectedImdbScores[0] = score[0];\n    selectedImdbScores[1] = score[1];\n    // TODO: delete logging statement for production\n    //console.log(\"selected range = \" + selectedImdbScores[0] + \" - \" + selectedImdbScores[1]);\n}\n\nlet allCountries = [\n    { item: 'Austria' },\n    { item: 'Brazil' },\n    { item: 'Canada' },\n    { item: 'China' },\n    { item: 'Cuba' },\n    { item: 'Denmark' },\n    { item: 'France' },\n    { item: 'Finland' },\n    { item: 'Germany' },\n    { item: 'Italy' },\n    { item: 'Japan' },\n    { item: 'Mexico' },\n    { item: 'Pakistan'},\n    { item: 'Russia' },\n    { item: 'Spain' },\n    { item: 'United Kingdom' },\n    { item: 'USA' },\n    { item: 'India' },\n    { item: 'Nigeria' },\n    { item: 'Egypt' },\n    { item: 'Spain' },\n    { item: 'Norway' },\n    { item: 'Sweden' },\n    { item: 'Netherlands' },\n    { item: 'Singapore' },\n    { item: 'Mongolia' },\n    { item: 'Iceland' },\n    { item: 'Hungary' },\n    { item: 'Italy' },\n\n];\nallCountries.sort();\nlet allLanguages = [\n    { item: 'German' },\n    { item: 'English' },\n    { item: 'French' },\n    { item: 'Spanish' },\n    { item: 'Italian' },\n    { item: 'Hindi' },\n    { item: 'Arabic' },\n    { item: 'Dutch' },\n    { item: 'Portuguese' },\n    { item: 'Russian' },\n    { item: 'Ukrainian' },\n    { item: 'Polish' },\n    { item: 'Yoruba' },\n    { item: 'Japanese' },\n    { item: 'Chinese' },\n    { item: 'Korean' },\n    { item: 'Malay' },\n    { item: 'Tamil' },\n    { item: 'Farsi' },\n    { item: 'Greek' },\n    { item: 'Norwegian' },\n    { item: 'Swedish' },\n];\nallLanguages.sort();\nlet allGenre = [\n    { item: 'Drama' },\n    { item: 'Thriller' },\n    { item: 'Romance' },\n    { item: 'Horror' },\n    { item: 'Action' },\n    { item: 'Fantasy' },\n    { item: 'Comedy' },\n    { item: 'History' },\n    { item: 'Crime' },\n    { item: 'Western' },\n    { item: 'Documentary' },\n    { item: 'War' },\n    { item: 'Noir' },\n    { item: 'Animation' },\n    { item: 'Music' },\n    { item: 'Musical' },\n    { item: 'Biography' },\n    { item: 'Sport' },\n];\nallGenre.sort();\nlet allActors = [\n    {item: \"Leonardo DiCaprio\"},\n    {item: \"Keanu Reeves\"},\n    {item:\"Dwayne Johnson\"},\n    {item: \"Scarlett Johansson\"},\n    {item: \"Natalie Portman\"},\n    {item: \"Marlon Brando\"},\n    {item: \"Audrey Hepburn\"},\n    {item: \"Christian Bale\"},\n    {item: \"Tom Cruise\"},\n    {item: \"Emma Stone\"},\n    {item: \"Jennifer Aniston\"},\n    {item: \"Kate Winslet\"},\n    {item: \"Tom Hanks\"},\n    {item: \"Robert Downey Jr.\"},\n    {item: \"Denzel Washington\"},\n    {item: \"Brad Pitt\"},\n    {item: \"Will Smith\"},\n    {item: \"Johnny Depp\"},\n    {item: \"Shahrukh Khan\"},\n    {item: \"Amitabh Bachchan\"},\n    {item: \"Marion Cotillard\"},\n    {item: \"Omar Sy\"},\n    {item: \"Audrey Tautou\"},\n];\nallActors.sort();\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        top: 98\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        zIndex: 1300,\n        top: 98\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    hide: {\n        display: 'none',\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: theme.spacing(1.5, 3),\n        // padding: 15px 10px\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-end',\n        marginTop: 98,\n        top: 98\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: -drawerWidth,\n    },\n    contentShift: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginLeft: 0,\n    },\n\n}));\n\n\n\nexport default function Sidebar() {\n    let searchOptions = [];\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(true);\n    const [list, setList] = useState(featuredMovieList);\n\n\n\n    const [filmName, setFilmName] = React.useState(\"\");\n\n    const [countryName, setCountryName] = React.useState(\"\");\n    const [language, setLanguage] = React.useState(\"\");\n    const [genre, setGenre] = React.useState(\"\");\n    const [actorName, setActorName] = React.useState(\"\");\n    const [year, setYear] = React.useState([\"\", \"\"]);\n    const [rating, setRating] = React.useState([\"\", \"\"]);\n\n\n    const handleDrawerOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n        setOpen(false);\n    };\n\n    function handleCallback(filmName) {\n        setFilmName(filmName);\n    }\n\n    function handleListCallback(filmList) {\n        console.log(filmList)\n        setList(filmList);\n    }\n\n    function handleCountryCallback(countryName) {\n        setCountryName(countryName);\n        console.log(countryName);\n        searchOptions.push({Country:countryName});\n        console.log(searchOptions);\n    }\n\n\n    function handleLanguageCallback(language) {\n        setLanguage(language);\n        searchOptions.push({Language:language});\n        console.log(searchOptions);\n    }\n\n    function handleGenreCallback(genre) {\n        setGenre(genre);\n        searchOptions.push({Genre:genre});\n        console.log(searchOptions);\n    }\n\n    function handleActorCallback(actorName) {\n        setActorName(actorName);\n        searchOptions.push({Actor:actorName});\n        console.log(searchOptions);\n    }\n\n    function handleYearCallback(selectedYears) {\n        setYear(selectedYears);\n    }\n\n    function handleRatingCallback(selectedImdbScores) {\n        setRating(selectedImdbScores);\n    }\n\n    function resetList() {\n        setList(featuredMovieList);\n    }\n\n\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar\n                position=\"fixed\"\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: open,\n                })}\n            >\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        onClick={handleDrawerOpen}\n                        edge=\"start\"\n                        className={clsx(classes.menuButton, open && classes.hide)}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Advanced Search\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"persistent\"\n                anchor=\"left\"\n                open={open}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={handleDrawerClose}>\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n                    </IconButton>\n                </div>\n                <Divider />\n                <List>\n                    <ListItem>\n                        <AutocompletePlusCheckbox\n                            name=\"countries\"\n                            label=\"Country of Origin\"\n                            items={allCountries}\n                            advancedSearchCallback = {handleCountryCallback}\n                        />\n                    </ListItem>\n                    <Divider />\n\n                    <ListItem>\n                        <AutocompletePlusCheckbox\n                            name=\"languages\"\n                            label=\"Language\"\n                            items={allLanguages}\n                            advancedSearchCallback = {handleLanguageCallback}\n                        />\n                    </ListItem>\n                    <Divider />\n                    <ListItem>\n                        <AutocompletePlusCheckbox\n                            name=\"genre\"\n                            label=\"Select Genre\"\n                            items={allGenre}\n                            advancedSearchCallback = {handleGenreCallback}\n                        />\n                    </ListItem>\n                    <Divider />\n                    <ListItem>\n                        <AutocompletePlusCheckbox\n                            name=\"actors\"\n                            label=\"Select Actors\"\n                            items={allActors}\n                            advancedSearchCallback = {handleActorCallback}\n                        />\n                    </ListItem>\n\n                    <Divider />\n\n                    <ListItem>\n                        <RangeSlider\n                            textLabel={\"Year of Release\"}\n                            minVal={yearRangeAvailable[0]}\n                            maxVal={yearRangeAvailable[1]}\n                            getSelected={handleYearCallback} />\n                    </ListItem>\n                    <Divider />\n                    <ListItem>\n                        <RangeSlider\n                            textLabel={\"IMDB Rating\"}\n                            minVal={imdbScoreAvailable[0]}\n                            maxVal={imdbScoreAvailable[1]}\n                            getSelected={handleRatingCallback}\n                            increments={0.1} />\n                    </ListItem>\n\n\n                    <Divider />\n                    <ListItem>\n                        <AdvanceSearchButton\n                            country={countryName}\n                            language = {language}\n                            genre = {genre}\n                            actors = {actorName}\n                            yearOfRelease = {year}\n                            imdbRating = {rating}\n                            listCallback={handleListCallback}\n                            resetList={resetList} />\n                    </ListItem>\n\n                </List>\n\n\n            </Drawer>\n            <main\n                className={clsx(classes.content, {\n                    [classes.contentShift]: open,\n                })}\n            >\n                <div className={classes.drawerHeader} />\n                <div className=\"content\">\n                    <div id=\"welcome\">\n                        <h1>Welcome to StreamBuddy</h1>\n                        <h2>Search for a movie or use the advanced filters</h2>\n                    </div>\n                    <div className=\"search-bar\">\n                        <SearchBar\n                            parentCallBack={handleCallback}\n                            title={\"Search for Movies\"}\n                            autoCompleteData={netflixMovieList}\n                            getOptionLabel={(option) => option.Title}\n                            style={{ width: 300 }} />\n                        <div className=\"advance-button\">\n                            <SearchButton\n                                filmName={filmName}\n                                listCallback={handleListCallback}\n                                resetList={resetList}\n                            />\n                        </div>\n\n                    </div>\n                    <div className=\"movie-cards\">\n                        <MoviecardList list={list} />\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n}","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Reviews.js",["147"],"import React, {useContext} from 'react';\nimport {UserContext} from \"./UserContext\";\nimport SingleReview from './SingleReview';\n\nfunction Reviews() {\n    const {user, setUser} = useContext(UserContext);\n\n    let userReviews = user.reviews;\n    console.log(\"userReviews are \", user.reviews);\n\n    // we have quite a few null review objects, need to delete them in the backend.\n    // for now I just skip them\n    var nonNullReviews = userReviews.reduce(function(result, review) {\n        if (review) {\n          result.push(review);\n        }\n        return result;\n      }, []);\n    \n    console.log(\"usable reviews are \", nonNullReviews)\n\n    return(\n            <section id=\"Reviews\">\n                <div className=\"movie-cards-wrapper\">\n                        <div>\n                            <h1>My Reviews</h1>\n                            <div className=\"horizontal-line\" />\n                        </div>\n                </div>\n            <div>\n                {nonNullReviews.map((review, i) => (\n                    <div>\n                        <SingleReview review={review} key={i}/>\n                    </div>\n                ))}\n            </div>\n            </section>\n\n    );\n}\n\nexport default Reviews;","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Friends.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MoviecardListWrapper.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/RangeSlider.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/SearchBar.js",["148","149"],"import React, { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    searchbar: {\n        ...theme.searchbar\n    }\n}));\n\nfunction SearchBar(props) {\n    const classes = useStyles();\n\n    // const [inputValue, setInputValue] = React.useState({name:''});\n    const [filmName, setFilmName] = useState(\"\");\n\n    // function recorder(event, value) {\n    //     const {name} = event.target;\n\n    //     setInputValue(existingVal => {\n    //         return {\n    //             [name]:value\n    //         };\n    //     });\n    //    // console.log(value);\n    // }\n\n    function handleChange(event, newInputValue) {\n        if (newInputValue !== null) {\n            console.log(newInputValue);\n            setFilmName(newInputValue.Title);\n            props.parentCallBack(newInputValue.Title);\n        }\n    }\n\n    const filterOptions = createFilterOptions({\n        matchFrom: 'start',\n        limit: 20,\n    });\n\n    return (\n        <div>\n            {/* <div>{`inputValue: '${filmName.Title}'`}</div> */}\n            <Autocomplete\n                background=\"transparent\"\n                id=\"search-box-title\"\n                options={props.autoCompleteData}\n                getOptionLabel={props.getOptionLabel}\n                style={props.style}\n                filterOptions={filterOptions}\n                onChange={handleChange}\n                renderInput={(params) => <TextField {...params} label={props.title} variant=\"outlined\" />}\n            />\n        </div>\n    );\n}\n\nexport default SearchBar;","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MoviecardList.js",["150","151","152"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Moviecard from \"./Moviecard\";\nimport { featuredMovieList } from \"../featuredMovieList\";\nimport CustomizedAlerts from \"./Alerts\";\n\n// const useStyles = makeStyles((theme) => ({\n//     root: {\n//         flexGrow: 1,\n//     },\n//     paper: {\n//         height: 140,\n//         width: 100,\n//     },\n//     control: {\n//         padding: theme.spacing(8),\n//     },\n// }));\n\nexport default function MoviecardList(props) {\n    // const classes = useStyles();\n    // const [list, setList] = React.useState(props.list);\n    const initialList = props.list;\n    if((initialList === undefined || null) || initialList.length < 1 ){\n        return(\n            <div className=\"movie-cards\">\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Grid container justify=\"center\" spacing={5}>\n                            <p style={{marginBottom: 40}}>Your list is empty :( <br /> Add some Movies!!! </p>\n                                </Grid>\n                        </Grid>\n                    </Grid>\n            </div>\n        )\n    } else\n    return (\n            <div className=\"movie-cards\">\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Grid container justify=\"center\" spacing={5}>\n                            {initialList.map((item) => (\n                                <Grid item>\n                                    <Moviecard item={item}/>\n                                </Grid>\n                            ))}\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n    );\n}\n","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/AutocompletePlusCheckbox.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/SearchButton.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/netflixMovieList.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/featuredMovieList.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/SingleReview.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Alerts.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/Moviecard.js",["153"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {Backdrop, ButtonGroup, Fade, Modal} from \"@material-ui/core\";\nimport MovieCardActions from \"./MovieCardActions\";\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 345,\n    },\n    paper: {\n        padding: 3,\n        marginTop: \"15%\"\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow:'scroll'\n    },\n    buttons: {\n        fontSize: 10,\n        backgroundColor: \"white\"\n    }\n});\n\nexport default function Moviecard(props) {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const handlePopoverOpen = (event) => {\n        setOpen(true);\n    };\n\n    const handlePopoverClose = () => {\n        setOpen(false);\n\n    };\n\n    return (\n        <Card className={classes.root}>\n            <CardActionArea>\n                <CardMedia\n                    className={classes.media}\n                    image={props.item.Poster}\n                    title={props.item.Title}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {props.item.moviename}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        Title: {props.item.Title}<br />\n                        Release Year: {props.item.Year}<br />\n                        IMDB Rating: {props.item.imdbRating} <br/>\n                        Genre: {props.item.Genre}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n            <MovieCardActions item={props.item}/>\n            </CardActions>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\"\n                type={\"button\"}\n                onClick={(e) => {\n                    e.preventDefault();\n                    window.location.href = 'https://www.google.com/search?q=netflix+'+ props.item.Title;\n                }}>\n                    Watch on Netflix\n                </Button>\n                <Button size=\"small\" color=\"primary\"\n                        type={\"button\"}\n                        onClick={handlePopoverOpen}>\n                    SEE FULL DETAILS\n                </Button>\n                <Modal open={open}\n                       className={classes.modal}\n                onClose={handlePopoverClose}\n                       closeAfterTransition\n                       disableScrollLock\n                       BackdropComponent={Backdrop}\n                       BackdropProps={{\n                       timeout:500}}\n                disableRestoreFocus>\n                    <Fade in={open}>\n                        <div className={classes.paper}>\n                            <div id=\"popovertext\" style={{maxWidth: 900, padding: 20, backgroundColor: \"white\", position: \"flex\", zIndex:10}}>\n                                <p> <h4>Title:</h4>{props.item.Title}</p> <br />\n                                <p> <h4>Rated:</h4> {props.item.Rated} </p> <br />\n                                <p> <h4>Runtime:</h4> {props.item.Runtime} </p> <br />\n                                <p> <h4>Language(s):</h4> {props.item.Language} </p> <br />\n                                <p> <h4>Country Filmed In:</h4> {props.item.Country} </p> <br />\n                                <p> <h4>Director:</h4> {props.item.Director} </p> <br />\n                                <p> <h4>Actors:</h4> {props.item.Actors} </p> <br />\n                                {/*<p> <h4>Ratings:</h4>*/}\n                                {/*    {props.item.Ratings[0].Source} {props.item.Ratings[0].Value} <br />*/}\n                                {/*    {props.item.Ratings[1].Source} {props.item.Ratings[1].Value} <br />*/}\n                                {/*    {props.item.Ratings[2].Source} {props.item.Ratings[2].Value}</p> <br />*/}\n                                <p> <h4>Plot Summary:</h4> {props.item.Plot} </p>\n                            </div>\n                        </div>\n                    </Fade>\n                </Modal>\n            </CardActions>\n        </Card>\n    );\n}\n","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MoviecardListDense.js",["154"],"import * as React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport Moviecard from \"./Moviecard\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nconst columns = [\n    { field: 'Title', headerName: 'Title', width: 200 },\n    {\n        field: 'Year',\n        headerName: 'Year',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Rated',\n        headerName: 'Rated',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Released',\n        headerName: 'Released',\n        type: 'number',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Runtime',\n        headerName: 'Runtime',\n        type: 'number',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Genre',\n        headerName: 'Genre',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Director',\n        headerName: 'Director',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Actors',\n        headerName: 'Actors',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'Plot',\n        headerName: 'Plot',\n        width: 120,\n        editable: true,\n    },\n    {\n        field: 'imdbRating',\n        headerName: 'IMDB Rating',\n        width: 120,\n        editable: true,\n    },\n\n];\n\n\nexport default function MoviecardListDense(props) {\n    const rows = props.movieList;\n    if((rows === undefined || null) || rows.length < 1 ){\n        return(\n            <div className=\"movie-cards\">\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Grid container justify=\"center\" spacing={5}>\n                            <p style={{marginBottom: 40}}>Your list is empty :( <br /> Add some Movies!!! </p>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    } else\n    return (\n        <div style={{ height: 400, width: '100%' }}>\n            <DataGrid\n                rows={rows}\n                getRowId={(row) => row._id}\n                columns={columns}\n                pageSize={5}\n                checkboxSelection\n                disableSelectionOnClick\n            />\n        </div>\n    );\n}\n\n\n","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/MovieCardActions.js",["155","156"],"import React, {useContext} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport {UserContext} from \"./UserContext\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Backdrop, Divider, Fade, Modal, Snackbar} from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport RatingsAndReviewInput from \"./RatingsAndReviewInput\";\nimport axios from \"axios\";\n\nconst options = ['Mark As Seen', 'Add to Watchlist', 'Rate / Review'];\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n    paper: {\n        padding: 3,\n        marginTop: \"15%\"\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow:'scroll'\n    },\n}));\n\nexport default function MovieCardActions(props) {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n    const [loginReminderAlert, setLoginReminderAlert] = React.useState(false);\n    const [successAlert, setSuccessAlert] = React.useState(false);\n    const [ratingPopover, setRatingPopover] = React.useState(false);\n    const classes = useStyles();\n    const {user, setUser} = useContext(UserContext);\n\n\n    const updateUserWatched = (user, item) => {\n        axios.put(`http://localhost:5000/api/users/${user._id}/watched/`, {\n            item\n        }).then((res) => {\n            setUser(res.data);\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n\n    const updateUserWatchlist = (user, item) => {\n        axios.put(`http://localhost:5000/api/users/${user._id}/watchlist/`, {\n            item\n        }).then((res) => {\n            setUser(res.data);\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n\n    const handlePopoverOpen = (event) => {\n        setRatingPopover(true);\n    };\n\n    const handlePopoverClose = () => {\n        setRatingPopover(false);\n    };\n\n    const handleClose1 = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setLoginReminderAlert(false);\n        setSuccessAlert(false);\n    };\n\n    const handleClick = () => {\n        if (user === null) {\n            setLoginReminderAlert(true);\n            return;\n        }\n        console.info(`You clicked ${options[selectedIndex]}`);\n        if (options[selectedIndex] === 'Mark As Seen') {\n            console.log(\"Mark as seen from button!!\")\n            updateUserWatched(user, props.item);\n            setSuccessAlert(true);\n            console.log(\"user watched updated successfully\");\n        } else if (options[selectedIndex] === 'Add to Watchlist') {\n            console.log(\"Add to Watchlist from button!!!\")\n            updateUserWatchlist(user, props.item);\n            setSuccessAlert(true)\n        } else if (options[selectedIndex] === 'Rate / Review') {\n            handlePopoverOpen()\n            console.log(\"Rate / Review from button!!!\")\n        }\n    };\n\n    const handleMenuItemClick = (event, index) => {\n        if (user === null) {\n            setLoginReminderAlert(true);\n            return;\n        }\n        setSelectedIndex(index);\n        setOpen(false);\n        console.info(`You clicked ${options[index]}`, index);\n        if (index === 0) {\n        } else if (index === 1) {\n        } else if (index === 2) {\n        }\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    // checks whether the user has already reviewed this movie\n    // TODO: not yet used because it returned true for all movies -- need to fix\n    const alreadyReviewed = () => {\n        console.log(\"checking if alreadyReviewed\")\n        if (!user || user.reviews || !Array.isArray(user.reviews) || !user.reviews.length) {\n            console.log(\"user: \", user)\n            console.log(\"user.reviews: \", user.reviews)\n            console.log(\"return false\")\n            return false;\n          }\n        const movieAlreadyReviewed = user.reviews.filter(review => review.movieTitle === props.item.Title)\n        console.log(\"movieAlreadyReviewed is \", movieAlreadyReviewed);\n        if (movieAlreadyReviewed) {\n            console.log(\"this movie has already been reviewed\")\n            return true;\n        } else {\n            console.log(\"this movie has not yet been removed\")\n            return false;\n        }\n    }\n\n    return (\n\n        <Grid container direction=\"column\" alignItems=\"center\">\n            <div className={classes.root}><Snackbar open={loginReminderAlert} autoHideDuration={3000} onClose={handleClose1}>\n                <Alert onClose={handleClose1} severity=\"info\">\n                    Please Login/Register first!\n                </Alert>\n            </Snackbar>\n                <Snackbar open={successAlert} autoHideDuration={3000} onClose={handleClose1}>\n                    <Alert onClose={handleClose1} severity=\"success\">\n                        Success!\n                    </Alert>\n                </Snackbar></div>\n            <Modal open={ratingPopover}\n                   className={classes.modal}\n                   onClose={handlePopoverClose}\n                   closeAfterTransition\n                   disableScrollLock\n                   BackdropComponent={Backdrop}\n                   BackdropProps={{\n                       timeout:500}}\n                   disableRestoreFocus>\n                <Fade in={ratingPopover}>\n                    <div className={classes.paper}>\n                        <div id=\"popovertext\" style={{maxWidth: 900, width: 500, padding: 40, backgroundColor: \"white\", position: \"flex\", zIndex:10}}>\n                            <h1>Rate And Review</h1>\n                            <Divider />\n                            <h2 style={{marginTop: 20, marginBottom: 20}}> {props.item.Title}</h2>\n                            <img src={props.item.Poster}/>\n                            <RatingsAndReviewInput filmId={props.item._id} moviePoster={props.item.Poster} movieTitle={props.item.Title} onPostClick={handlePopoverClose} />\n                        </div>\n                    </div>\n                </Fade>\n            </Modal>\n            <Grid item xs={12}>\n                <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef} aria-label=\"split button\">\n                    <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n                    <Button\n                        color=\"primary\"\n                        size=\"small\"\n                        aria-controls={open ? 'split-button-menu' : undefined}\n                        aria-expanded={open ? 'true' : undefined}\n                        aria-label=\"select merge strategy\"\n                        aria-haspopup=\"menu\"\n                        onClick={handleToggle}\n                    >\n                        <ArrowDropDownIcon />\n                    </Button>\n                </ButtonGroup>\n                <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal style={{zIndex:1}}>\n                    {({ TransitionProps, placement }) => (\n                        <Grow\n                            {...TransitionProps}\n                            style={{\n                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                            }}\n                        >\n                            <Paper>\n                                <ClickAwayListener onClickAway={handleClose}>\n                                    <MenuList id=\"split-button-menu\" style={{zIndex: 1}}>\n                                        {options.map((option, index) => (\n                                            <MenuItem\n                                                key={option}\n                                                // disabled={index === 2}\n                                                selected={index === selectedIndex}\n                                                onClick={(event) => handleMenuItemClick(event, index)}\n                                            >\n                                                {option}\n                                            </MenuItem>\n                                        ))}\n                                    </MenuList>\n                                </ClickAwayListener>\n                            </Paper>\n                        </Grow>\n                    )}\n                </Popper>\n            </Grid>\n        </Grid>\n    );\n}\n","/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/RatingsAndReviewInput.js",[],"/Users/nazishtazeem/WebstormProjects/CPSC455-StreamBuddy/streambuddy/src/components/AdvanceSearchButton.js",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":10,"column":18,"nodeType":"163","messageId":"164","endLine":10,"endColumn":25},{"ruleId":"165","severity":1,"message":"166","line":25,"column":17,"nodeType":"167","endLine":25,"endColumn":98},{"ruleId":"161","severity":1,"message":"168","line":58,"column":9,"nodeType":"163","messageId":"164","endLine":58,"endColumn":22},{"ruleId":"161","severity":1,"message":"169","line":59,"column":9,"nodeType":"163","messageId":"164","endLine":59,"endColumn":26},{"ruleId":"161","severity":1,"message":"162","line":61,"column":18,"nodeType":"163","messageId":"164","endLine":61,"endColumn":25},{"ruleId":"161","severity":1,"message":"170","line":63,"column":19,"nodeType":"163","messageId":"164","endLine":63,"endColumn":27},{"ruleId":"161","severity":1,"message":"171","line":38,"column":10,"nodeType":"163","messageId":"164","endLine":38,"endColumn":26},{"ruleId":"161","severity":1,"message":"172","line":45,"column":10,"nodeType":"163","messageId":"164","endLine":45,"endColumn":30},{"ruleId":"161","severity":1,"message":"162","line":6,"column":18,"nodeType":"163","messageId":"164","endLine":6,"endColumn":25},{"ruleId":"161","severity":1,"message":"173","line":13,"column":11,"nodeType":"163","messageId":"164","endLine":13,"endColumn":18},{"ruleId":"161","severity":1,"message":"174","line":16,"column":12,"nodeType":"163","messageId":"164","endLine":16,"endColumn":20},{"ruleId":"161","severity":1,"message":"175","line":2,"column":10,"nodeType":"163","messageId":"164","endLine":2,"endColumn":20},{"ruleId":"161","severity":1,"message":"176","line":5,"column":10,"nodeType":"163","messageId":"164","endLine":5,"endColumn":27},{"ruleId":"161","severity":1,"message":"177","line":6,"column":8,"nodeType":"163","messageId":"164","endLine":6,"endColumn":24},{"ruleId":"161","severity":1,"message":"178","line":10,"column":19,"nodeType":"163","messageId":"164","endLine":10,"endColumn":30},{"ruleId":"161","severity":1,"message":"179","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":17},{"ruleId":"161","severity":1,"message":"180","line":140,"column":11,"nodeType":"163","messageId":"164","endLine":140,"endColumn":26},{"ruleId":"165","severity":1,"message":"166","line":187,"column":29,"nodeType":"167","endLine":187,"endColumn":59},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'tempWatchList' is assigned a value but never used.","'tempWatchedMovies' is assigned a value but never used.","'setViews' is assigned a value but never used.","'setSelectedYears' is defined but never used.","'setSelectedimdbScore' is defined but never used.","'classes' is assigned a value but never used.","'filmName' is assigned a value but never used.","'makeStyles' is defined but never used.","'featuredMovieList' is defined but never used.","'CustomizedAlerts' is defined but never used.","'ButtonGroup' is defined but never used.","'Moviecard' is defined but never used.","'alreadyReviewed' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]